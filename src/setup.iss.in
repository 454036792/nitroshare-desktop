; This file is used to build setup.iss which is then fed to the Inno Setup compiler
; The variables used below come from the CMakeLists.txt

#if ${CMAKE_SIZEOF_VOID_P} == 8
  #define ARCH "x86_64"
#else
  #define ARCH "x86"
#endif

[Setup]
AppId              = {{174A4547-917E-4BAF-9F25-FCE545CCD487}
AppName            = "${PROJECT_NAME}"
AppVersion         = "${PROJECT_VERSION}"
AppPublisher       = "${PROJECT_AUTHOR}"
DefaultDirName     = "{pf}\${PROJECT_NAME}"
DefaultGroupName   = "${PROJECT_NAME}"
LicenseFile        = "${CMAKE_CURRENT_SOURCE_DIR}\..\LICENSE.txt"
OutputDir          = .
OutputBaseFilename = "${PROJECT_NAME}-${PROJECT_VERSION}-{#ARCH}"
Compression        = lzma
SolidCompression   = yes

; Set two additional directives if we are building a 64-bit installer
#if ARCH == "x86_64"
ArchitecturesAllowed            = x64
ArchitecturesInstallIn64BitMode = x64
#endif

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "${CMAKE_BINARY_DIR}\out\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\${PROJECT_NAME}"; Filename: "{app}\{#TARGET_FILE_NAME}"
Name: "{commondesktop}\${PROJECT_NAME}"; Filename: "{app}\{#TARGET_FILE_NAME}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#TARGET_FILE_NAME}"; Description: "{cm:LaunchProgram,{#StringChange("${PROJECT_NAME}", '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]

// The code below is adapted from
// http://www.vincenzo.net/isxkb/index.php?title=Adding_a_rule_to_the_Windows_firewall

procedure CurStepChanged(CurStep: TSetupStep);
var
  FirewallManager: Variant;
  FirewallProfile: Variant;
  FirewallObject: Variant;
begin
  if CurStep = ssPostInstall then
    try
      FirewallManager := CreateOleObject('HNetCfg.FwMgr');
      FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
      FirewallObject := CreateOleObject('HNetCfg.FwAuthorizedApplication');
      FirewallObject.Name := '${PROJECT_NAME}';
      FirewallObject.ProcessImageFileName := ExpandConstant('{app}\{#TARGET_FILE_NAME}');
      FirewallProfile.AuthorizedApplications.Add(FirewallObject);
    except
    end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  FirewallManager: Variant;
  FirewallProfile: Variant;
begin
  if CurUninstallStep = usPostUninstall then
    try
      FirewallManager := CreateOleObject('HNetCfg.FwMgr');
      FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
      FireWallProfile.AuthorizedApplications.Remove(ExpandConstant('{app}\{#TARGET_FILE_NAME}'));
    except
    end;
end;
